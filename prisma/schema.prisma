// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//TODO - Rever os Varchar()
model Consultation_Status {
  id           Int            @id @default(autoincrement())
  status       String         @db.VarChar(30)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  consultation Consultation[]
}

model Bond_Status {
  id        Int      @id @default(autoincrement())
  status    String   @db.VarChar(30)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bond      Bond[]
}

model Medical_Specialty {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doctor       Doctor[]
  consultation Consultation[]
  carer        Carer[]
}

model Token_Blacklist {
  id        String   @id @default(uuid())
  token     String   @db.VarChar(600)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(100)
  description     String            @db.VarChar(255)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  role_permission Role_Permission[]
  bond_permission Bond_Permission[]
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  role_permission Role_Permission[]
  user            User[]
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  cpf       String   @db.Char(11)
  telephone String   @db.Char(11)
  birth_day DateTime @db.Date
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role    Role[]
  profile Profile?

  doctor    Doctor[]
  carer     Carer[]
  employeer Employeer[]

  notification Notification[]
  remider      Remider[]
  consultation Consultation[]

  bond_started_by Bond[] @relation("bond_started_by")
  bond_invited_to Bond[] @relation("bond_invited_to")
}

model Profile {
  id          Int     @id @default(autoincrement())
  bio         String? @db.VarChar(300)
  picture_url String? @db.VarChar(300)
  user        User?   @relation(fields: [user_id], references: [id])
  user_id     Int?    @unique
}

model Doctor {
  id           Int     @id @default(autoincrement())
  user_id      Int     @unique
  specialty_id Int     @unique
  crm_state    String  @db.Char(2)
  crm          String  @db.Char(6)
  crm_verified Boolean @default(true)

  user      User              @relation(fields: [user_id], references: [id])
  specialty Medical_Specialty @relation(fields: [specialty_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Carer {
  id           Int @id @default(autoincrement())
  user_id      Int @unique
  specialty_id Int @unique

  user      User              @relation(fields: [user_id], references: [id])
  specialty Medical_Specialty @relation(fields: [specialty_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Employeer {
  id      Int @id @default(autoincrement())
  user_id Int @unique

  user User @relation(fields: [user_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role_Permission {
  id            Int @id @default(autoincrement())
  role_id       Int
  permission_id Int

  role       Role       @relation(fields: [role_id], references: [id])
  permission Permission @relation(fields: [permission_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id      Int     @id @default(autoincrement())
  title   String
  message String  @db.VarChar(255)
  read    Boolean @default(false)
  user_id Int

  user User @relation(fields: [user_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Remider {
  id        Int      @id @default(autoincrement())
  label     String
  date_time DateTime @db.DateTime()
  user_id   Int

  user User @relation(fields: [user_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bond {
  id        Int @id @default(autoincrement())
  from_user Int
  to_user   Int
  status_id Int

  from   User        @relation("bond_started_by", fields: [from_user], references: [id])
  to     User        @relation("bond_invited_to", fields: [to_user], references: [id])
  status Bond_Status @relation(fields: [status_id], references: [id])

  bond_permission Bond_Permission[]
  consultation    Consultation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bond_Permission {
  id            Int @id @default(autoincrement())
  permission_id Int
  bond_id       Int

  permission Permission @relation(fields: [permission_id], references: [id])
  bond       Bond       @relation(fields: [bond_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Consultation {
  id                   Int      @id @default(autoincrement())
  date_of_consultation DateTime @db.Date
  reason               String   @db.VarChar(255)
  observation          String   @db.VarChar(2000)
  bond_id              Int
  deparment_id         Int
  consultation_status  Int
  created_by_user      Int

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  bond       Bond                @relation(fields: [bond_id], references: [id])
  specialty  Medical_Specialty   @relation(fields: [deparment_id], references: [id])
  status     Consultation_Status @relation(fields: [consultation_status], references: [id])
  created_by User                @relation(fields: [created_by_user], references: [id])

  prescription Prescription[]
}

model Prescription {
  id              Int      @id @default(autoincrement())
  label           String
  observation     String   @db.VarChar(2000)
  digital         String?
  physical        String?  @db.VarChar(2000)
  consultation_id Int

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  consultation Consultation @relation(fields: [consultation_id], references: [id])
}
